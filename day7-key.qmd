---
title: "Joins and strings and dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(lubridate)
```

# Joins

```{r}

animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
)

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### Full Join

```{r}

full_join_example <- full_join(animals, sites)

```

### Left Join

```{r}

left_join_example <- left_join(animals, sites, by = "location")

```

### Right Join

### Inner Join

```{r}
inner_join_example <- inner_join(animals, sites, by = "location")
```

### Example when key variables have non-matching names

```{r}

sites_2 <- sites %>% 
  rename(loc = location)

nonmatching <- full_join(animals, sites_2, by = c("location" = "loc"))
```

### Semi Join

```{r}
semi_join_example <- semi_join(animals, sites)
```

### Anti Join

```{r}
anti_join_example <- anti_join(animals, sites, by = "location")
```

# Dates and times with `lubridate`

```{r}
my_date <- "03-15-1998"
lubridate::mdy(my_date)

my_date <- "11/7/2003"
lubridate::dmy(my_date)

my_date <- "08-Jun-1974"
lubridate::dmy(my_date)

my_date <- "19610518"
lubridate::ymd(my_date)

```

```{r}
lubridate::mdy("1942-08-30")

lubridate::dmy("09/22/84")

```

```{r}
time <- "2020-08-12 11:18"
time <- ymd_hm(time)
time
class(time)

```

```{r}
# working with time zones
with_tz(time, "America/Buenos_Aires")

with_tz(time, "America/Los_Angeles")

my_time <- lubridate::ymd_hms(time)

year(my_time)
week(my_time)
day(my_time)
hour(my_time)
minute(my_time)
```

```{r}
teddy_bday <- lubridate::ymd("20170615")
wday(teddy_bday, label = TRUE)

wade_bday <- lubridate::ymd("19940121")
wday(wade_bday, label = TRUE)
# What day of the week is the date from?
week(wade_bday)

```

```{r}
urchin_counts <-tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)

urchin_ymd <- urchin_counts %>% 
  mutate(date = mdy(date)) %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)
time_interval

time_length(time_interval, "week")

```

# `stringr` for working with strings

### str_detect



```{r}

my_string <- "Buta loves eating cords and smelling slippers"

my_string %>% 
  str_detect("love")

my_string %>% 
  str_detect("dog")

my_string <- c("burrito", "fish taco", "taco salad")

my_string %>% 
  str_detect("t")

my_string %>% 
  str_detect("taco")

```

# filter & condition to make a new table with 'skywalker'

```{r}
skywalkers <- starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))


mauls <- starwars %>% 
  filter(str_detect(name, pattern = "Maul"))

# create a subset that keeps rows where "blue" shows up in the eye color either alone or in combo

blue_eyes <- starwars %>% 
  filter(str_detect(eye_color, pattern = "blue"))
```


# `str_replace` to replace string patterns

```{r}

firewalkers <- starwars %>% 
  mutate(name_2 = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

# `str_trim`

```{r}
feedback <- c("  I ate     some  nachos", "Wednesday   morning      ")
str_trim(feedback)
str_squish(feedback)

# str_to*
str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)
str_to_sentence(feedback)

# From starwars, create a new data frame starwars_lc that adds a new column called names_lower containing character names coverted to all lowercase

starwars_lc <- starwars %>%
  mutate(names_lower = str_to_lower(starwars$name))
```

# `case_when()` ways to populated columns similar to `ifelse` function - creates a new column with true or false values depending on a condition of values in another column

```{r}
sw_robot <- starwars %>% 
  mutate(robot_status = case_when(
    species == "Droid" ~ "A Robot",
    species == "Human" ~ "It's a human",
    TRUE ~ "This is something else"
  ))

# can be based on values as well

```











